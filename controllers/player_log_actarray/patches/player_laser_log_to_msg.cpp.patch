Index: src/player_laser_log_to_msg.cpp
===================================================================
--- src/player_laser_log_to_msg.cpp	(revision 23757)
+++ src/player_laser_log_to_msg.cpp	(working copy)
@@ -62,15 +62,16 @@
     // ROS messages
     LaserScan msg_scan_;
 
-    string file_name_, msg_topic_;
+  string file_name_, msg_topic_;
     Publisher scan_pub_;
 
     ifstream logfile_stream_;
-    bool is_file_;
+  bool is_file_, spin_, multifile_;
+  int save_pcd_laser_;
 
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     PlayerLogToMsg () : tf_frame_ ("laser_tilt_mount_link"),
-                        is_file_ (true)
+                        is_file_ (true), multifile_(false)
     {
       msg_topic_ = "/laser_scan";
       scan_pub_ = nh_.advertise<LaserScan> (msg_topic_.c_str (), 1);
@@ -78,7 +79,17 @@
 
     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     virtual ~PlayerLogToMsg () { }
-
+  
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+  //initialize args needed for multi log files
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+  void init()
+  {
+    save_pcd_laser_ = 0;
+    nh_.setParam("/save_pcd_laser", 0);
+    spin_ = true;
+  }
+  
     ////////////////////////////////////////////////////////////////////////////////
     // Start
     int
@@ -95,6 +106,24 @@
       msg_scan_.header.frame_id = tf_frame_;
       return (0);
     }
+ 
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+  // Start overridden
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+   int
+      start2 (string file_name)
+  {
+    // Open file
+    logfile_stream_.open (file_name.c_str ());
+    long int nr_lines = count (istreambuf_iterator<char>(logfile_stream_), istreambuf_iterator<char> (), '\n');
+    
+    if (nr_lines == 0)
+      ROS_WARN ("No lines found in %s", file_name.c_str ());
+    logfile_stream_.seekg (0, ios::beg);
+    ROS_INFO ("Extracting points from %s ...", file_name.c_str ());
+    msg_scan_.header.frame_id = tf_frame_;
+    return (0);
+  }
 
     ////////////////////////////////////////////////////////////////////////////////
     // Spin (!)
@@ -105,7 +134,7 @@
       int total_nr_points = 0, total_laser_scans = 0;
       string line;
       vector<string> st;
-
+      
       while (nh_.ok ())
       {
         getline (logfile_stream_, line);
@@ -197,6 +226,151 @@
 
       return (true);
     }
+
+  ////////////////////////////////////////////////////////////////////////////////
+  // Spin for multiple files (!)
+  ////////////////////////////////////////////////////////////////////////////////
+  bool
+  spin2 ()
+  {
+    double ti, tj = 0, tdif = 0;
+    int total_nr_points = 0, total_laser_scans = 0;
+    string line;
+    vector<string> st;
+    ros::Rate loop_rate(0.2);
+    
+    while (nh_.ok ())
+      {
+	update_parameters_from_server();
+	if(spin_)
+	  {
+	    getline (logfile_stream_, line);
+	    // Do we assume that the input is a file? If so, and EOF, break
+	    if (logfile_stream_.eof () && is_file_ && file_name_ != "nothing")
+	      {
+		ROS_WARN("EOF laser!!!");
+		logfile_stream_.close();
+		spin_ = false;
+		continue;
+	      }
+	      //break;
+	    // If any bad/eof/fail flags are set, continue
+	    if (!logfile_stream_.good ())
+	      {
+		usleep (500);
+		logfile_stream_.clear ();
+		continue;
+	      }
+	    // If the line is empty, continue
+	    if (line == "")
+	      continue;
+	    
+	    // Split a line into tokens
+	    boost::trim (line);
+	    boost::split (st, line, boost::is_any_of (" "), boost::token_compress_on);
+	    
+	    string line_type = st.at (0);
+	    if (line_type.substr (0, 1) == "#")
+	      continue;
+	    
+	    // Get the interface name
+	    string interface = st.at (3);
+	    
+	    // ---[ laser
+	    if (interface.substr (0, 5) != "laser")
+	      continue;
+	    
+	    ti = atof (line_type.c_str ());
+	    
+	    tdif = fabs (ti - tj);                    // Just in case time decides to go backwards :)
+	    
+	    msg_scan_.header.stamp = Time (ti);
+	    
+	    // index = st.at (4)
+	    int type    = atoi (st.at (5).c_str ());
+	    int subtype = atoi (st.at (6).c_str ());
+	    
+	    if (type != 1 || subtype != 1)            // we only process PLAYER_LASER_DATA_SCAN packets for now (1:1)
+	      continue;
+	    
+	    msg_scan_.angle_min = atof (st.at (8).c_str ());
+	    msg_scan_.angle_max = atof (st.at (9).c_str ());
+	    msg_scan_.angle_increment = atof (st.at (10).c_str ());
+	    msg_scan_.range_min = 0;
+	    msg_scan_.range_max = atof (st.at (11).c_str ());
+	    msg_scan_.ranges.resize (atoi (st.at (12).c_str ()));
+	    msg_scan_.intensities.resize (msg_scan_.ranges.size ());
+	    
+	    if (msg_scan_.ranges.size () == 0)        // If no points found, continue to the next packet
+	      continue;
+	    
+	    int j = 0;
+	    for (unsigned int i = 0; i < msg_scan_.ranges.size (); i++)
+	      {
+		msg_scan_.ranges[i] = atof (st.at (13 + i + j).c_str ());
+		msg_scan_.intensities[i] = atoi (st.at (14 + i + j).c_str ());
+		j++;
+	      }
+	    total_nr_points += msg_scan_.ranges.size ();
+	    ++total_laser_scans;
+	    
+	    if (is_file_)
+	      ROS_DEBUG ("Publishing data (%d) with %d points on topic %s in frame %s (%f). Angle min/max/resulution: %f/%f/%f, Range min/max: %f/%f",
+			 total_laser_scans, (int)msg_scan_.ranges.size (), nh_.resolveName (msg_topic_).c_str (), msg_scan_.header.frame_id.c_str (), msg_scan_.header.stamp.toSec (), 
+			 msg_scan_.angle_min, msg_scan_.angle_max, msg_scan_.angle_increment, msg_scan_.range_min, msg_scan_.range_max);
+	    scan_pub_.publish (msg_scan_);
+	    
+	    // Sleep for a certain number of seconds (tdif)
+	    if (tj != 0 && is_file_)
+	      {
+		Duration tictoc (tdif);
+		tictoc.sleep ();
+	      }
+	    nh_.getParam("/save_pcd_laser", save_pcd_laser_);
+	    if(save_pcd_laser_ == 1 || save_pcd_laser_ == 2)
+	      nh_.setParam("/save_pcd_laser", 0);
+	    spinOnce ();
+	    tj = ti;
+	    
+	    logfile_stream_.clear ();
+	  }
+
+	if(!spin_)
+	  {
+	    loop_rate.sleep();  
+	    tj = 0, tdif = 0;
+	    total_nr_points = 0, total_laser_scans = 0;
+	    line = "";
+	    st.clear();
+	    nh_.getParam("/save_pcd_laser", save_pcd_laser_);
+	    if(save_pcd_laser_ == 0)
+	      nh_.setParam("/save_pcd_laser", 1);
+	    ROS_WARN("player laser looping!!!!");
+	  }
+      }
+    // Close the file and finish the movie
+    if(logfile_stream_.is_open ( ))
+      logfile_stream_.close ();
+    ROS_INFO ("[done : %d measurements with %d points extracted]", total_laser_scans, total_nr_points);
+    
+    return (true);
+  }
+    
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+  // Update parameters from server
+  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+  void
+  update_parameters_from_server()
+  {
+    string log_filename_tmp = file_name_;
+    nh_.getParam("/log_filename", file_name_);
+    if (log_filename_tmp != file_name_ && file_name_ != "nothing")
+      {
+	ROS_INFO("Laser filename set to: %s", file_name_.c_str());
+	start2(file_name_);
+	spin_ = true;
+      }
+  }
 };
 
 /* ---[ */
@@ -217,12 +391,22 @@
   p.file_name_ = string (argv[1]);
   p.is_file_   = atoi (argv[2]);
 
-  if (p.start () == -1)
-  {
-    ROS_ERROR ("Error processing %s. Exiting.", argv[1]);
-    return (-1);
-  }
-  p.spin ();
+  //do we pass files in directory?
+  if (atoi(argv[2]) != 2)
+    {
+      if (p.start () == -1)
+	{
+	  ROS_ERROR ("Error processing %s. Exiting.", argv[1]);
+	  return (-1);
+	}
+      p.spin ();
+    }
+  else
+    {
+      p.init();
+      p.file_name_ = "nothing";
+      p.spin2();
+    }
 
   return (0);
 }
