<launch>

  <node pkg="point_cloud_converter" type="point_cloud_converter" name="point_cloud_converter" output="screen" respawn="true" >
    <remap from="/points_in" to="/shoulder_cloud"/>
  </node>
  
  <node pkg="image_algos" type="pointcloud_to_image_projector_opencv_node" name="pointcloud_to_image_projector_opencv_node" output="screen" respawn="true" >
    <param name="input_image_topic" value="/wide_stereo/right/image_rect_color" />
    <param name="input_cloud_topic" value="/laser_table_detector/extract_object_clusters/output" />
    <param name="output_image_topic" value="image_with_projected_cluster" />
    <param name="output_cluster_topic" value="output_cluster" />
  </node>
<!--   launch-prefix="xterm -e gdb -args" -->

  <group ns="/laser_table_detector">

    <!-- PCL Manager -->
    <node pkg="nodelet" type="nodelet" name="table_detector_pcl_manager" args="manager" output="screen"/>

  <!-- Run a passthrough filter to downsample and delimit in x direction -->
    <node pkg="nodelet" type="nodelet" name="psx" args="load pcl/VoxelGrid table_detector_pcl_manager" output="screen">
      <remap from="~input" to="/points2_out" />
      <rosparam>
        leaf_size: 0.01
        filter_field_name: x
        filter_limit_min: 0.0
        filter_limit_max: 1.0
      </rosparam>
    </node>

  <!-- Run a passthrough filter to delimit in y direction -->
    <node pkg="nodelet" type="nodelet" name="psy" args="load pcl/PassThrough table_detector_pcl_manager" output="screen">
      <remap from="~input" to="psx/output" />
      <rosparam>
        filter_field_name: y
        filter_limit_min: -1.0
        filter_limit_max: 1.0
      </rosparam>
    </node>

    <!-- Run a passthrough filter to delimit in z direction -->
    <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough table_detector_pcl_manager" output="screen">
      <remap from="~input" to="psy/output" />
      <rosparam>
        filter_field_name: z
        filter_limit_min: 0.6
        filter_limit_max: 1.2
      </rosparam>
    </node>

    <!-- Estimate point normals -->
    <node pkg="nodelet" type="nodelet" name="normal_estimation" args="load pcl/NormalEstimation table_detector_pcl_manager" output="screen">
      <remap from="~input"   to="passthrough/output" />
      <rosparam>
        k_search: 0
        radius_search: 0.1
        spatial_locator: 0
      </rosparam>
    </node>


        <!-- Segment the table plane -->
    <node pkg="nodelet" type="nodelet" name="planar_segmentation" args="load pcl/SACSegmentationFromNormals table_detector_pcl_manager" output="screen">
      <remap from="~input" to="passthrough/output" />
      <remap from="~normals" to="normal_estimation/output" />
      <rosparam>
        model_type: 11
        method_type: 0
        model_threshold: 0.05
        normal_distance_weight: 0.1
        optimize_coefficients : true
        axis: [0.0, 0.0, 1.0]
        eps_angle: 0.3
      </rosparam>
    </node>

    <!-- Extract all-plane indices -->
    <node pkg="nodelet" type="nodelet" name="extract_remaining_indices" args="load pcl/ExtractIndices table_detector_pcl_manager" output="screen">
      <remap from="~input"   to="passthrough/output" />
      <remap from="~indices" to="planar_segmentation/inliers" />
      <rosparam>
        negative: true
      </rosparam>
    </node>

    <!-- Project the planar inliers -->
    <node pkg="nodelet" type="nodelet" name="project_planar_inliers" args="load pcl/ProjectInliers table_detector_pcl_manager" output="screen">
      <remap from="~input" to="passthrough/output" />
      <remap from="~inliers" to="planar_segmentation/inliers" />
      <remap from="~model" to="planar_segmentation/model" />
      <rosparam>
        model_type: 11
        copy_all_data: false
        copy_all_fields: false
      </rosparam>
    </node>

    <!-- Compute the convex hull -->
    <node pkg="nodelet" type="nodelet" name="table_convex_hull" args="load pcl/ConvexHull2D table_detector_pcl_manager" output="screen">
      <remap from="~input" to="project_planar_inliers/output" />
    </node>

    <!-- Extract the object clusters using a polygonal prism -->
    <node pkg="nodelet" type="nodelet" name="extract_objects_table" args="load pcl/ExtractPolygonalPrismData table_detector_pcl_manager" output="screen">
      <remap from="~input" to="extract_remaining_indices/output" />
      <remap from="~planar_hull"   to="table_convex_hull/output" />
      <rosparam>
        height_min: -0.5
        height_max: -0.01
        vpz: 1.3
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="extract_object_indices_above_plane" args="load pcl/ExtractIndices table_detector_pcl_manager" output="screen">
      <!-- Extract_plane_indices needs to be negated for this work -->
      <remap from="~input"   to="extract_remaining_indices/output" />
      <remap from="~indices" to="extract_objects_table/output" />
      <rosparam>
        negative: false
      </rosparam>
    </node>

    <!-- Cluster the remaining points (all-plane) -->
    <node pkg="nodelet" type="nodelet" name="extract_object_clusters" args="load pcl/EuclideanClusterExtraction table_detector_pcl_manager" output="screen">
      <remap from="~input" to="extract_object_indices_above_plane/output" />
      <rosparam>
        max_queue_size: 10
        cluster_tolerance: 0.05
        spatial_locator: 0
        cluster_min_size: 50
      </rosparam>
    </node>
  </group>
  
</launch>
