#!/usr/bin/env python

import roslib; roslib.load_manifest('tf_trajectory_visualization')

import rospy
import tf
import math

import visualization_msgs.msg as visualization_msgs
import geometry_msgs.msg as geometry_msgs
import std_msgs.msg as std_msgs

def pt_dist(pt1, pt2):
    return math.sqrt(math.pow(pt1[0]-pt2[0], 2)
                     + math.pow(pt1[1]-pt2[1], 2)
                     + math.pow(pt1[2]-pt2[2], 2))

def make_marker_msg(points, color, fixed_frame, line_width):
    marker = visualization_msgs.Marker()
    marker.header.frame_id = fixed_frame
    marker.ns = 'trajectory'
    marker.id = 0
    marker.type = visualization_msgs.Marker.LINE_STRIP
    marker.action = visualization_msgs.Marker.ADD
    marker.pose.position.x = 0
    marker.pose.position.y = 0
    marker.pose.position.z = 0
    marker.pose.orientation.x = 0
    marker.pose.orientation.y = 0
    marker.pose.orientation.z = 0
    marker.pose.orientation.w = 1.0
    marker.color = std_msgs.ColorRGBA(*color)
    marker.scale.x = line_width
    marker.points = [geometry_msgs.Point(*pt) for pt in points]
    return marker
    
def main():
    rospy.init_node('tf_trajectory_visualization')

    listener = tf.TransformListener()

    fixed_frame = rospy.get_param('~fixed_frame', '/map')
    trajectory_frame = rospy.get_param('~trajectory_frame', '/base_footprint')
    sample_frequency = rospy.get_param('~sample_frequency', 10)
    pose_distance_threshold = rospy.get_param('~pose_distance_threshold', 0.05)
    line_width = rospy.get_param('~line_width', 0.05)
    color = (rospy.get_param('~color/r', 1.0),
             rospy.get_param('~color/g', 0.0),
             rospy.get_param('~color/b', 0.0),
             rospy.get_param('~color/a', 1.0))

    r = rospy.Rate(sample_frequency)

    pub = rospy.Publisher('~trajectory', visualization_msgs.Marker)

    points = []
    while not rospy.is_shutdown():
        r.sleep()
        if listener.canTransform(fixed_frame, trajectory_frame, rospy.Time(0)):
            trans, rot = listener.lookupTransform(fixed_frame, trajectory_frame, rospy.Time(0))
            if len(points) > 1 and pt_dist(points[-1], trans) < pose_distance_threshold:
                continue
            points.append(trans)
            pub.publish(make_marker_msg(points, color, fixed_frame, line_width))

if __name__ == '__main__':
    main()
