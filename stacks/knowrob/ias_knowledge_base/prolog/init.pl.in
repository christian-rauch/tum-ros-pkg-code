%%
%% Copyright (C) 2010 by Moritz Tenorth
%%
%% This program is free software; you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation; either version 3 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program.  If not, see <http://www.gnu.org/licenses/>.
%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dependencies

% Semweb library for OWL/RDF access
:- register_ros_package(semweb).


% TUM utilities library
:- register_ros_package(ias_prolog_addons).
:- use_module(library('classifiers')).
:- use_module(library('jython')).
:- use_module(library('util')).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parse OWL files, register name spaces
:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/owl.owl', false, false, true).
:- owl_parser:owl_parse('@LOCAL_PACKAGE_PATH@/owl/knowrob.owl', false, false, true).

:- rdf_db:rdf_register_ns(rdfs,    'http://www.w3.org/2000/01/rdf-schema#',     [keep(true)]).
:- rdf_db:rdf_register_ns(owl,     'http://www.w3.org/2002/07/owl#',            [keep(true)]).
:- rdf_db:rdf_register_ns(knowrob, 'http://ias.cs.tum.edu/kb/knowrob.owl#',     [keep(true)]).


% convenience: set some Prolog flags in order *not to* trim printed lists with [...]
:- set_prolog_flag(toplevel_print_anon, false).
:- set_prolog_flag(toplevel_print_options, [quoted(true), portray(true), max_depth(0), attributes(portray)]).

:- set_prolog_flag(float_format, '%.12g').



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% utility to generate unique instance identifiers

:- assert(instance_nr(0)).
rdf_instance_from_class(Class, Instance) :-

  % retrieve global index
  instance_nr(Index),

  % create instance from type
  ((concat_atom(List, '#', Class),length(List,Length),Length>1) -> (
    % Class is already a URI
    T=Class
  );(
    atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#', Class, T)
  )),
  atom_concat(T, Index, Instance),
  rdf_assert(Instance, rdf:type, T),

  % update index
  retract(instance_nr(_)),
  Index1 is Index+1,
  assert(instance_nr(Index1)).



:-  rdf_meta
    holds_tt(:,t).

% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
% KnowRob-Base: holds() and related predicates
% 


%% holds_tt(+Goal, [+Start, +End]) is nondet.
%
% General definition of holds_tt that uses holds(..) to check if a relation
% holds throughout a time span (i.e. for each time point during the time span)
%
% @param Goal  The goal that is to be checked
% @param Start Start time of the time span under consideration
% @param End   End time of the time span under consideration
%
holds_tt(Goal, [Start, End]) :-

    rdf_assert(knowrob:'holds_tt', rdf:type, knowrob:'TimeInterval'),
    rdf_assert(knowrob:'holds_tt', knowrob:startTime, Start),
    rdf_assert(knowrob:'holds_tt', knowrob:endTime,   End),

    holds(Goal, Start),
    holds(Goal, End),

    % find all perceptions of the objects at hand
    arg(1, Goal, Arg1),arg(2, Goal, Arg2),
    findall([P_i,Arg1], ( (rdf_has(P_i, knowrob:objectActedOn, Arg1);rdf_has(P_i, knowrob:objectActedOn, Arg2)),
                           rdfs_individual_of(P_i,  knowrob:'MentalEvent')), Perceptions),

      forall( ( member(P_O, Perceptions), nth0(0, P_O, Perception),
                rdf_triple(knowrob:startTime, Perception, PStT),
                rdf_triple(knowrob:temporallySubsumes, knowrob:'holds_tt', PStT) ),
              holds(Goal, PStT) ),

    rdf_retractall(knowrob:'holds_tt', _, _).


% Helper predicates

% create a timepoint-identifier for the current time
get_timepoint(T) :-
  get_time(Ts),
  atom_concat('http://ias.cs.tum.edu/kb/knowrob.owl#timepoint_', Ts, T),
  rdf_assert(T, rdf:type, knowrob:'TimePoint').


% find all perceptions of the object that are valid at time point T
object_perception(Object, Time, Perception) :-

    findall([P_i,Object], (rdf_has(P_i, knowrob:objectActedOn, Object),
                         rdfs_individual_of(P_i,  knowrob:'MentalEvent')), Perceptions),

    member(P_O, Perceptions),
    nth0(0, P_O, Perception),
    nth0(1, P_O, Object),

    temporally_subsumes(Perception, Time).


temporally_subsumes(Long, Short) :-

      read_perception_starttime(Long, LongSt),!,
      read_perception_endtime(Long,   LongEt),!,

      read_perception_starttime(Short, ShortSt),!,
      read_perception_endtime(Short,   ShortEt),!,

      % compare the start and end times
      (ShortSt=<ShortEt),
      (LongSt=<ShortSt), (ShortSt=<LongEt),
      (LongSt=<ShortEt),   (ShortEt=<LongEt).


read_perception_starttime(Perception, StartTime) :-

  % start time is asserted
  rdf_triple(knowrob:startTime, Perception, StartTtG),
  rdf_split_url(_, StartTt, StartTtG),
  atom_concat('timepoint_', StartTAtom, StartTt),
  term_to_atom(StartTime, StartTAtom).



read_perception_endtime(Perception, EndTime) :-

  % end time is asserted
  rdf_triple(knowrob:endTime, Perception, EndTtG),
  rdf_split_url(_, EndTt, EndTtG),
  atom_concat('timepoint_', EndTAtom, EndTt),
  term_to_atom(EndTime, EndTAtom),!;

  % search for later detections of the object
  ( rdf_has(Perception, knowrob:objectActedOn, Object),
    rdf_has(LaterPerception, knowrob:objectActedOn, Object),
    LaterPerception \= Perception,
    rdfs_individual_of(LaterPerception,  knowrob:'MentalEvent'),
    rdf_triple(knowrob:startTime, Perception, StT),
    rdf_triple(knowrob:startTime, LaterPerception, EndTtG),
    rdf_triple(knowrob:after, StT, EndTtG),
    rdf_split_url(_, EndTt, EndTtG),
    atom_concat('timepoint_', EndTAtom, EndTt),
    term_to_atom(EndTime, EndTAtom),! );

  % otherwise take the current time (plus a second to avoid glitches)
  ( get_time(ET), EndTime is ET + 1.0).


% sort perceptions by their start time
compare_object_perceptions(Delta, P1, P2) :-

    nth0(2, P1, St1),
    nth0(2, P2, St2),
    compare(Delta, St2, St1).





