QUERY REPOSITORY
===============

Current
-------
verifySingleCapAvailability(cap:'explore', rosie:'TUM_Rosie_RobotInstance1').

comp_successProbability(task:'TableSetting', P).

hasComponent(rosie:'TUM_Rosie_RobotInstance1', C).
hasComponent(pr2:'PR2_Instance1', C).
hasComponent(pr2:'PR2_Instance1', pr2:'PR2_l_ArmComposition').

compNeededForTask(task:'TableSetting', srdl:'TUM_Rosie_RobotInstance1', CompInstList).


matchRobotAndTask(srdl:'TUM_Rosie_RobotInstance1', task:'TableSetting').


returnNotSupportedCaps([cap:'move_arm', cap:'move_base', cap:'grasp_execution'], srdl:'TUM_Rosie_RobotInstance1', L).

semanticCapVerification(cap:'move_base', srdl:'TUM_Rosie_RobotInstance1').

verifySingleCapAvailability(cap:'grasp_execution', srdl:'TUM_Rosie_RobotInstance1').

Meeting Prof Beetz et al, 08.06.10
----------------------------------

All subtasks of a task:
subtasks(task:'TableSetting', L).

All capabilities required for a task:
taskCapabilities(task:'TableSetting', L).

All capabilities a robot possesses (based on direct assertions):
robotCapabilitiesFromAssertions(knowrob:'TUM_Rosie', L).

Matching by intersection (based on assertions of robot capabilities):
matchByIntersection(knowrob:'TUM_Rosie', task:'TableSetting').

Match based on robot components
matchRobotAndTask(srdl:'TUM_Rosie_RobotInstance1', task:'TableSetting').

All components of a robot:
hasComponent(srdl:'TUM_Rosie_RobotInstance1', C).

All components that are used for a task:
compNeededForTask(task:'TableSetting', srdl:'TUM_Rosie_RobotInstance1', CompInstList).
-----


owl_has(srdl:'TUM_Rosie_RobotInstance1', comp:'hasSuccessorInCinematicChain', O).

hasComponent(srdl:'TUM_Rosie_RobotInstance1', O).

Subject = srdl:'TUM_Rosie_RobotInstance1', Prop1 = srdl:'hasHardwareComponent', Prop2 = comp:'isParentInCinematicChain', rdf_has(Subject, Prop1, X), rdf_has(X, Prop2, Value).

propertyChain(srdl:'TUM_Rosie_RobotInstance1', srdl:'hasHardwareComponent', X).

TUM_Rosie_RobotInstance1


propertyChainHasComponent(srdl:'TUM_Rosie_RobotInstance1', X).


?- propertyChainHasComponent(srdl:'TUM_Rosie_RobotInstance1', X).
X = 'http://ias.cs.tum.edu/kb/SRDL_component.owl#TUM_Rosie_WheeledOmnidirPlatform1' ;
X = 'http://ias.cs.tum.edu/kb/SRDL_component.owl#TUM_Rosie_Torso1' ;
X = 'http://ias.cs.tum.edu/kb/SRDL_component.owl#TUM_Rosie_PC' ;
ERROR: Out of local stack
   Exception: (380,414) rdf_db:rdf_has(_G473, 'http://ias.cs.tum.edu/kb/computable.owl#target', 'http://www.w3.org/2002/07/owl#SymmetricProperty') ? creep
   Exception: (380,399) rdfs_computable:rdfs_computable_instance_of('http://ias.cs.tum.edu/kb/SRDL_component.owl#isParentInCinematicChain', 'http://www.w3.org/2002/07/owl#SymmetricProperty') ? abort
% Execution Aborted


matchBySemanticCapabilitySearch(knowrob:'TUM_Rosie', task:'TableSetting').


robotCapabilities(knowrob:'TUM_Rosie', RobotCapTmp),  append(RobotCapTmp, ['http://ias.cs.tum.edu/kb/SRDL_capability.owl#Capability'], RobotCap).

 
taskCapabilities(task:'TableSetting', TaskCapTmp), treeSearchLeavesOnly(TaskCapTmp, cap:'hasSubCapability', TaskCap).


matchCapabilityLists(['http://ias.cs.tum.edu/kb/SRDL_capability.owl#move_base', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#move_arm', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#grasp_execution', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#Capability'], ['http://ias.cs.tum.edu/kb/SRDL_capability.owl#ObjectClassificationCapability', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#grasp_execution', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#move_arm', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#move_base', 'http://ias.cs.tum.edu/kb/SRDL_capability.owl#Capability']).




