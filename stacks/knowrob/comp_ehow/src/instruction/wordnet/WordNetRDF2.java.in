package instruction.wordnet;

import instruction.exceptions.WordNetException;
import instruction.semanticObjects.Word;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAnnotationAssertionAxiom;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLClassExpression;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;

public class WordNetRDF2 {

	/** rdf:type constant of a noun synset */
	public static final String RDF_TYPE_NOUN_SYNSET = "http://www.w3.org/2006/03/wn/wn20/schema/NounSynset";

	/** rdf:type constant of a verb synset */
	public static final String RDF_TYPE_VERB_SYNSET = "http://www.w3.org/2006/03/wn/wn20/schema/VerbSynset";

	/** rdf:type constant of an adjective synset */
	public static final String RDF_TYPE_ADJECTIVE_SYNSET = "http://www.w3.org/2006/03/wn/wn20/schema/AdjectiveSatelliteSynset";

	/** rdf:type constant of an adverb synset */
	public static final String RDF_TYPE_ADVERB_SYNSET = "http://www.w3.org/2006/03/wn/wn20/schema/AdverbSynset";

	/** rdf:type constant of a description */
	public static final String RDF_TYPE_DESCRIPTION = "http://www.w3.org/2006/03/wn/wn20/schema/Description";

	public static final boolean CACHE_IRREGULAR_FORMS = true;

	protected static HashMap<String, String> irregularVerbs = null;

	protected static HashMap<String, String> irregularNouns = null;

	private static Map<String, List<String>> synsets = new HashMap<String, List<String>>();
	private static Map<String, String> glossary = new HashMap<String, String>();
	private static Map<String, String> synsetTypes = new HashMap<String, String>();

	static {
		initialize();
	}

	public static void initialize() {

		try {

			OWLOntologyManager manager = OWLManager.createOWLOntologyManager();

			// Load synset ontology
			IRI documentIRI = IRI
					.create(new File("@LOCAL_PACKAGE_PATH@/etc/wordnet/wordnet-synset.rdf").toURI());

			OWLOntology ontology = manager
					.loadOntologyFromOntologyDocument(documentIRI);

			for (OWLNamedIndividual synset : ontology
					.getIndividualsInSignature()) {

				String synsetID = (String) synset.toString().subSequence(1,
						synset.toString().length() - 1);
				String label = null;
				String synsetType = null;

				for (OWLAnnotationAssertionAxiom ass : synset
						.getAnnotationAssertionAxioms(ontology)) {
					if (ass.getAnnotation().getProperty().toString().equals(
							"rdfs:label"))
						label = (String) ass.getValue().toString().subSequence(
								1, ass.getValue().toString().indexOf("\"", 1));
				}

				for (OWLClassExpression clazz : synset.getTypes(ontology))
					synsetType = (String) clazz.toString().subSequence(1,
							clazz.toString().length() - 1);

				if (label == null)
					throw new RuntimeException(
							"ERROR: Could not determine label: " + label + " "
									+ synset);
				if (synsetType == null || synset.getTypes(ontology).size() > 1)
					throw new RuntimeException(
							"ERROR: Could not determine class synset: "
									+ synset);

				List<String> tmpSynset = synsets.get(label);

				if (tmpSynset == null) {
					tmpSynset = new ArrayList<String>();
					synsets.put(label, tmpSynset);
				}

				tmpSynset.add(synsetID);

				if (synsetTypes.get(synsetID) != null)
					throw new RuntimeException(
							"ERROR: Ambiguous type of synset.");

				synsetTypes.put(synsetID, synsetType);

			}

			System.out.println("[WordNet]: parsed "
					+ ontology.getIndividualsInSignature().size()
					+ " words in ontology.");

			manager.removeOntology(ontology);

			// Load glossary ontology
			IRI glossaryIRI = IRI
					.create(new File("@LOCAL_PACKAGE_PATH@/etc/wordnet/wordnet-glossary.rdf").toURI());

			OWLOntology glossaryOnt = manager
					.loadOntologyFromOntologyDocument(glossaryIRI);
			
			
			for (OWLNamedIndividual desc : glossaryOnt
					.getIndividualsInSignature()) {

				String synsetID = (String) desc.toString().subSequence(1,
						desc.toString().length() - 1);
				String gloss = null;
				
				Set<OWLAxiom> props = desc.getReferencingAxioms(glossaryOnt);
				
				for (OWLAxiom p:props) {
					int fst = p.toString().indexOf("\"");
					gloss = p.toString().substring(fst+1, p.toString().indexOf("\"@en-US", fst+1));
				}
				
				glossary.put(synsetID, gloss);
				
			}

			System.out.println("[WordNet]: parsed "
					+ glossaryOnt.getIndividualsInSignature().size()
					+ " descriptions in glossary.");

			manager.removeOntology(glossaryOnt);

			// Load irregular words
			try {
				cacheIrregularNouns();
				cacheIrregularVerbs();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (WordNetException e) {
				e.printStackTrace();
			}

		} catch (OWLOntologyCreationException e) {
			System.out.println("The ontology could not be created: "
					+ e.getMessage());
		}
	}
	
	/**
	 * Returns a natural language description of the word sense described by a synset
	 * @param synset
	 * @return
	 */
	public static String getGlossaryForSynset(String synset) {
		String entry = glossary.get(synset);
		if (entry == null || entry.isEmpty())
			entry = "no entry found for " + synset;
		return entry;
	}

	public static ArrayList<String> getSynsets(String word, String pos) {

		ArrayList<String> result = new ArrayList<String>();

		List<String> synset = synsets.get(word.toLowerCase());

		if (synset == null)
			synset = synsets.get(getWordStem(word, pos));

		if (synset == null)
			return result;

		for (String s : synset) {
			String type = synsetTypes.get(s);

			if (type == null)
				throw new RuntimeException("synset type not found: " + s);

			if (type.equals(pos))
				result.add(s);
		}

		return result;
	}

	public static String convertPOS(int type) {

		String pos = null;

		if (type == Word.TYPE_VERB_INFINITIVE
				|| type == Word.TYPE_PAST_PARTICIPLE
				|| type == Word.TYPE_GERUND)
			pos = RDF_TYPE_VERB_SYNSET;
		else if (type == Word.TYPE_NOUN)
			pos = RDF_TYPE_NOUN_SYNSET;
		else if (type == Word.TYPE_ADV)
			pos = RDF_TYPE_ADVERB_SYNSET;
		else if (type == Word.TYPE_ADJ)
			pos = RDF_TYPE_ADJECTIVE_SYNSET;

		return pos;
	}

	/**
	 * Checks whether the given word exists in WordNet data base, considering
	 * different word forms, e.g. plural forms for nouns or distinct verb forms.
	 * 
	 * @see WordNet.wordExactlyExistsAs(String, int)
	 * 
	 * @param word
	 * @param type
	 * @return
	 * @throws Exception
	 * @throws MalformedURLException
	 */
	public static boolean wordExistsAs(String word, String pos) {

		boolean found = wordExactlyExistsAs(word, pos);

		if (!found) {

			String stem = getWordStem(word, pos);
//			System.out.println(stem);
			found = wordExactlyExistsAs(stem, pos);
		}

		return found;
	}

	/**
	 * Returns the stem of the word <code>word</code> postulating the
	 * part-of-speech <code>pos</code>.
	 */
	public static String getWordStem(String word, String pos) {

		if (word == null || pos == null)
			return null;

		word = word.toLowerCase();

		String stem = null;

		boolean found = false;

		if (pos.equals(RDF_TYPE_VERB_SYNSET)) {
			stem = word;
			found = wordExactlyExistsAs(stem, pos);

			if (!found && word.endsWith("ed")) {
				stem = word.substring(0, word.length() - 1);
				found = wordExactlyExistsAs(stem, pos);
				if (!found) {
					stem = word.substring(0, word.length() - 2);
					found = wordExactlyExistsAs(stem, pos);
				}
			}
			
			if (!found) {
				if (irregularVerbs.get(word) != null) {
					stem = irregularVerbs.get(word);
					found = wordExactlyExistsAs(stem, pos);
				}
			}
		}

		else if (pos.equals(RDF_TYPE_ADVERB_SYNSET)) {
			stem = word;
			found = wordExactlyExistsAs(stem, pos);
		}

		else if (pos.equals(RDF_TYPE_ADJECTIVE_SYNSET)) {
			stem = word;
			found = wordExactlyExistsAs(stem, pos);
		}

		else if (pos.equals(RDF_TYPE_NOUN_SYNSET)) {
			stem = word;
			found = wordExactlyExistsAs(stem, pos);
			if (!found) {
				if (word.endsWith("s")) {
					stem = word.substring(0, word.length() - 1);
					found = wordExactlyExistsAs(stem, pos);
				}
				if (!found && word.endsWith("es")) {
					stem = word.substring(0, word.length() - 2);
					found = wordExactlyExistsAs(stem, pos);
				}
				if (!found) {
					if (irregularNouns.get(word) != null) {
						stem = irregularNouns.get(word);
						found = wordExactlyExistsAs(stem, pos);
					}
				}
			}
		}

		if (found)
			return stem;
		else
			return null;
	}

	/**
	 * Checks whether the given word exists in WordNet data base, not
	 * considering different word forms.
	 * 
	 * @see WordNet.wordExistsAs(String, pos)
	 * 
	 * @param word
	 * @param pos
	 * @return
	 * @throws Exception
	 */
	public static boolean wordExactlyExistsAs(String word, String pos) {

		if (word == null)
			return false;
		List<String> syn = synsets.get(word.toLowerCase());
		
		if (syn == null)
			return false;
		
		for (int i = 0; i < syn.size(); i++) {
			if (synsetTypes.get(syn.get(i)).equals(pos)) {
				return true;
			}
		}
		return false;
	}

	private static void cacheIrregularVerbs() throws IOException,
			WordNetException {

		File verb_exc = new File(
				absoluteFilePath("@LOCAL_PACKAGE_PATH@/etc/wordnet/verb.exc"));
		if (!verb_exc.exists())
			throw new FileNotFoundException(
					"Mapping File for irregular Verb forms ("
							+ verb_exc.getAbsolutePath() + ") not found");
		else {
			FileReader reader = new FileReader(verb_exc);
			StringBuilder file = new StringBuilder();
			char[] buffer = new char[1024];
			int read = 0;
			while ((read = reader.read(buffer)) >= 0)
				file.append(buffer, 0, read);
			irregularVerbs = new HashMap<String, String>();

			String[] mappings = file.toString().split(
					System.getProperty("line.separator"));
			for (int i = 0; i < mappings.length; i++) {
				String[] keyValueSet = mappings[i].split(" ");
				if (keyValueSet.length < 2)
					throw new WordNetException("Illegal Mapping entry in "
							+ verb_exc.getName() + " -> " + keyValueSet.length
							+ " Tokens " + i);
				else {
					irregularVerbs.put(keyValueSet[0].replaceAll("_", " "), keyValueSet[1].replaceAll("_", " ").replaceAll("\\\\r", ""));
				}
			}

		}
	}

	public static String absoluteFilePath(String relativePath) {
		return new File(relativePath).getAbsolutePath().replaceAll("\\\\", "/");
	}

	private static void cacheIrregularNouns() throws IOException,
			WordNetException {
		File noun_exc = new File(
				absoluteFilePath("@LOCAL_PACKAGE_PATH@/etc/wordnet/noun.exc"));
		if (!noun_exc.exists())
			throw new FileNotFoundException(
					"Mapping File for irregular Noun forms ("
							+ noun_exc.getAbsolutePath() + ") not found");
		else {
			FileReader reader = new FileReader(noun_exc);
			StringBuilder file = new StringBuilder();
			char[] buffer = new char[1024];
			int read = 0;
			while ((read = reader.read(buffer)) >= 0)
				file.append(buffer, 0, read);
			irregularNouns = new HashMap<String, String>();

			String[] mappings = file.toString().split(
					System.getProperty("line.separator"));
			for (int i = 0; i < mappings.length; i++) {
				String[] keyValueSet = mappings[i].split(" ");
				if (keyValueSet.length < 2)
					throw new WordNetException("Illegal Mapping entry in "
							+ noun_exc.getName());
				else {
					irregularNouns.put(keyValueSet[0].replaceAll("_", " "), keyValueSet[1].replaceAll("_", " ").replaceAll("\\\\r", ""));
				}
			}

		}
	}

	public static void main(String[] args) {
		String word = "is";
		String pos = RDF_TYPE_VERB_SYNSET;

		if (wordExistsAs(word, pos))
			System.out.println(getSynsets(word, pos));

	}
}
