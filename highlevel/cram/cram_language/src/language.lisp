(in-package :cpl)

(macrolet ((define-flop-wrapper (name1 name2)
             `(progn (declaim (inline name1))
                     (defun ,name1 (&rest args)
                       (apply ',name2 args)))))
  (define-flop-wrapper <   fl<)
  (define-flop-wrapper >   fl>)
  (define-flop-wrapper +   fl+)
  (define-flop-wrapper -   fl-)
  (define-flop-wrapper *   fl*)
  (define-flop-wrapper /   fl/)
  (define-flop-wrapper =   fl=)
  (define-flop-wrapper eq  fl-eq)
  (define-flop-wrapper eql fl-eql)
  (define-flop-wrapper not fl-not)
  (define-flop-wrapper pulsed fl-pulsed))